# vim: ts=4 sw=4 et

const FCB_BUFFER_SIZE := 254;
typedef FCBIndexType is uint8;

record FCB_GBPB is
    channel: uint8;
    bufferlo: [uint8];
    bufferhi: uint16;
    count: uint16;
    counthi: uint16;
    pos: uint32;
end record;

record RawFCB is
    channel: uint8;
end record;

const FCB_I_READ := 0x40;
const FCB_I_WRITE := 0x80;

include "fileio.coh";

@impl sub FCBRawRead is
    var gbpb: FCB_GBPB;
    gbpb.channel := fcb.channel;
	gbpb.bufferlo := &fcb.buffer[0];
    gbpb.bufferhi := 0;
    gbpb.count := len as uint16;
    gbpb.counthi := 0;
    gbpb.pos := pos;

	@asm "lda #3"; # read block with pointer
	@asm "ldx #<", gbpb;
	@asm "ldy #>", gbpb;
	@asm "jsr $ffd1"; # OSGBPB

    amount := (len as FCBIndexType) - (gbpb.count as FCBIndexType);
end sub;

@impl sub FCBRawWrite is
    var gbpb: FCB_GBPB;
    gbpb.channel := fcb.channel;
	gbpb.bufferlo := &fcb.buffer[0];
    gbpb.bufferhi := 0;
    gbpb.count := len as uint16;
    gbpb.counthi := 0;
    gbpb.pos := pos;

	@asm "lda #1"; # write block with pointer
	@asm "ldx #<", gbpb;
	@asm "ldy #>", gbpb;
	@asm "jsr $ffd1"; # OSGBPB
end sub;

sub fcb_i_init(fcb: [FCB], filename: [uint8], mode: uint8): (errno: uint8) is
    errno := 1;
	var t := filename;
	loop
		if [t] == 0 then
			break;
		end if;
		t := t + 1;
	end loop;
	[t] := 13; # change to MOS terminator

	var channel: uint8;
	@asm "lda", mode;
	@asm "ldx 0+", filename;
	@asm "ldy 1+", filename;
	@asm "jsr $ffce"; # OSFIND
	@asm "sta", channel;
	[t] := 0; # change back to Cowgol terminator

    _fcb_init(fcb);
	fcb.channel := channel;
    if channel != 0 then
        errno := 0;
    end if;
end sub;

sub FCBOpenIn(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	errno := fcb_i_init(fcb, filename, FCB_I_READ);
end sub;

sub FCBOpenUp(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	errno := fcb_i_init(fcb, filename, FCB_I_READ|FCB_I_WRITE);
end sub;

sub FCBOpenOut(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	errno := fcb_i_init(fcb, filename, FCB_I_WRITE);
end sub;
	
sub FCBClose(fcb: [FCB]): (errno: uint8) is
	var channel := fcb.channel;
	if channel != 0 then
		FCBFlush(fcb);

		@asm "lda #0";
		@asm "ldy", channel;
		@asm "jsr $ffce"; # OSFIND
		fcb.channel := 0;
	end if;
	errno := 0;
end sub;

sub FCBExt(fcb: [FCB]): (len: uint32) is
	FCBFlush(fcb);

	# Nasty hack to get  a pointer to 32 bytes in zero page.
    var ptr: [uint32];
    @asm "lda #mos & 255";
    @asm "sta 0+", ptr;
    @asm "lda #mos / 256";
    @asm "sta 1+", ptr;

	var channel := fcb.channel;

	@asm "lda #2"; # read EXT#
	@asm "ldx #mos & 255";
	@asm "ldy", channel;
	@asm "jsr $ffda"; # OSARGS

	len := [ptr];
end sub;

include "common-file.coh";


