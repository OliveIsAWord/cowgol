&X __cmp1s
\ Signed comparison of r0 and a.
``:

&X __cmp2s
\ Signed comparison of r0r1 and r2r3.
``:

&X __cmp4z
\ Equality comparison of r0r1r2r3 and r4r5r6r7, leaving C for yes or !C for no.
``:
    cmp16 r2r3, r6r7
    jb UD, ``_notzero
    cmp16 r0r1, r4r5
    jb UD, ``_notzero
    clr c
    ret
``_notzero:
    setb c
    ret

&X __cmp4s
\ Signed magnitude comparison of r0r1r2r3 and r4r5r6r7, leaving C for LT.
``:

&X __cmp4u
\ Unsigned magnitude comparison of r0r1r2r3 and r4r5r6r7, leaving C for LT.
``:

&X __mul4
\ r0r1r2r3 = r0r1r2r3*r4r5r6r7
``:

&X __asr4
\ r0r1r2r3 >>= a
``:

&X __lsr4
\ r0r1r2r3 >>= a
``:

&X __lsl4
\ r0r1r2r3 <<= a
``:

&X __lsr1
\ r0 <<= a
``:

&X __neg4
\ r4r5r6r7 = 0 - r0r1r2r3
``:
    clr a
    mov r4, a
    mov r5, a
    mov r6, a
    mov r7, a
    sub16 r6r7, r2r3
    subb16 r4r5, r0r1
    ret

&X __not4
\ r0r1r2r3 = r0r1r2r3
``:
    mov a, #0xff
    mov r4, a
    mov r5, a
    mov r6, a
    mov r7, a
    xrl16 r0r1r2r3, r4r5r6r7
    ret

&X __divremu2
\ r0r1%r2r3 = r0r1/r2r3
``:
   
&X __divremu4
\ r0r1r2r3%r4r5r6r7 = r0r1r2r3/r4r5r6r7
``:
   
&X __divrems4
\ r0r1r2r3%r4r5r6r7 = r0r1r2r3/r4r5r6r7
``:
   
&X __indirectcall
\ Calls r0r1.
``:
    mov 0x83, r0 \ DPH
    mov 0x84, r1 \ DPL
    clr a
    jmp @a+dptr

\ vim: sw=4 ts=4 et

