const FCB_BUFFER_SIZE := 512;
typedef FCBIndexType is uint16;

record RawFCB is
	fd: uint32;
end record;

include "fileio.coh";

@impl sub FCBRawRead is
	var fd := fcb.fd;
	var dma := &fcb.buffer[0];
	var i: int32;
	@asm i, "=pread(", fd, ", (void*)(intptr_t)", dma, ", ", len, ", ", pos, ");";
	if i == -1 then
		amount := 0;
		fcb.flags := fcb.flags | FCB_FLAG_ERROR;
	else
		amount := i as FCBIndexType;
	end if;
end sub;

@impl sub FCBRawWrite is
	var fd := fcb.fd;
	var dma := &fcb.buffer[0];
	var i: int32;
	@asm i, "=pwrite(", fd, ", (void*)(intptr_t)", dma, ", ", len, ", ", pos, ");";
	if i == -1 then
		fcb.flags := fcb.flags | FCB_FLAG_ERROR;
	end if;
end sub;

sub fcb_i_open(fcb: [FCB], filename: [uint8], flags: uint32): (errno: uint8) is
	_fcb_init(fcb);

	@asm "errno = 0;";
	var fd: int32;
	@asm fd, " = open((char*)(intptr_t)", filename, ", ", flags, ", ", 0o666, ");";
	fcb.fd := fd as uint32;
	if fd < 0 then
		@asm errno, " = errno;";
	else
		errno := 0;
	end if;
end sub;

sub FCBOpenIn(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	(errno) := fcb_i_open(fcb, filename, 0o0000); # O_RDONLY
end sub;

sub FCBOpenUp(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	(errno) := fcb_i_open(fcb, filename, 0o0002); # O_RDWR
end sub;

sub FCBOpenOut(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	(errno) := fcb_i_open(fcb, filename, 0o1102); # O_RDWR|O_CREAT|O_TRUNC
end sub;
	
sub FCBClose(fcb: [FCB]): (errno: uint8) is
	FCBFlush(fcb);

	var fd := fcb.fd;
	@asm "errno = 0;";
	@asm "close(", fd, ");";
	@asm errno, " = errno;";
end sub;

sub FCBExt(fcb: [FCB]): (len: uint32) is
	FCBFlush(fcb);

	var fd := fcb.fd;
	@asm len, " = lseek(", fd, ", 0, SEEK_END);";
end sub;

include "common-file.coh";

