var LOMEM: [uint8];
@asm "lxi h, LOMEM";
@asm "shld", LOMEM;

var HIMEM: [uint8];
@asm "lhld 6";
@asm "shld", HIMEM;

sub Exit() is
	@asm "rst 0";
end sub;

sub ExitWithError() is
	@asm "rst 0";
end sub;

sub AlignUp(in: intptr): (out: intptr) is
	out := in;
end sub;

sub get_char(): (c: uint8) is
	@asm "mvi c, 1";
	@asm "call 5";
	@asm "sta", c;
end sub;

sub print_char(c: uint8) is
	if c == 10 then
		@asm "mvi e, 13";
		@asm "mvi c, 2";
		@asm "call 5";
	end if;
	@asm "lda", c;
	@asm "mov e, a";
	@asm "mvi c, 2";
	@asm "call 5";
end sub;

sub divmodu32(lhs: uint32, rhs: uint32): (quot: uint32, rem: uint32) is
	@asm "lhld", lhs, "+2";
	@asm "push h";
	@asm "lhld", lhs, "+0";
	@asm "push h";
	@asm "lhld", rhs, "+2";
	@asm "push h";
	@asm "lhld", rhs, "+0";
	@asm "push h";
	@asm "call dvrmu4";
	@asm "pop h";
	@asm "shld", rem, "+0";
	@asm "pop h";
	@asm "shld", rem, "+2";
	@asm "pop h";
	@asm "shld", quot, "+0";
	@asm "pop h";
	@asm "shld", quot, "+2";
end sub;

sub divmods32(lhs: int32, rhs: int32): (quot: int32, rem: int32) is
	@asm "lhld 2+", lhs;
	@asm "push h";
	@asm "lhld 0+", lhs;
	@asm "push h";
	@asm "lhld 2+", rhs;
	@asm "push h";
	@asm "lhld 0+", rhs;
	@asm "push h";
	@asm "call dvrms4";
	@asm "pop h";
	@asm "shld 0+", rem;
	@asm "pop h";
	@asm "shld 2+", rem;
	@asm "pop h";
	@asm "shld 0+", quot;
	@asm "pop h";
	@asm "shld 2+", quot;
end sub;

sub MemSet(buf: [uint8], byte: uint8, len: uint16) is
	var bufend := buf + len;
	loop
		if buf == bufend then
			return;
		end if;
		[buf] := byte;
		buf := buf + 1;
	end loop;
end sub;

include "common.coh";

