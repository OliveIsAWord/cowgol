# System call numbers are here:
# https://w3challs.com/syscalls/?arch=x86

const FCB_BUFFER_SIZE := 512;
typedef FCBIndexType is uint16;

record RawFCB is
	fd: uint32;
end record;

include "fileio.coh";

@impl sub FCBRawRead is
	var fd := fcb.fd;
	var dma := &fcb.buffer[0];
	var i: int32;

	@asm "movl $0xb4, %eax"; # READ64
	@asm "movl ", fd, ", %ebx";
	@asm "movl ", dma, ", %ecx";
	@asm "movw ", len, ", %dx";
	@asm "movzx %dx, %edx";
	@asm "movl ", pos, ", %esi";
	@asm "xorl %edi, %edi";
	@asm "int $0x80";
	@asm "movl %eax, ", i;

	if i < 0 then
		amount := 0;
		fcb.flags := fcb.flags | FCB_FLAG_ERROR;
	else
		amount := i as FCBIndexType;
	end if;
end sub;

@impl sub FCBRawWrite is
	var fd := fcb.fd;
	var dma := &fcb.buffer[0];
	var i: int32;

	@asm "movl $0xb5, %eax"; # WRITE64
	@asm "movl ", fd, ", %ebx";
	@asm "movl ", dma, ", %ecx";
	@asm "movw ", len, ", %dx";
	@asm "movzx %dx, %edx";
	@asm "movl ", pos, ", %esi";
	@asm "xorl %edi, %edi";
	@asm "int $0x80";
	@asm "movl %eax, ", i;

	if i < 0 then
		fcb.flags := fcb.flags | FCB_FLAG_ERROR;
	end if;
end sub;

sub fcb_i_open(fcb: [FCB], filename: [uint8], flags: uint32): (errno: uint8) is
	_fcb_init(fcb);

	@asm "mov $5, %eax"; # OPEN
	@asm "mov ", filename, ", %ebx";
	@asm "mov ", flags, ", %ecx";
	@asm "mov $", 0o666, ", %edx"; # umask
	@asm "int $0x80";
	var fd: int32;
	@asm "mov %eax, ", fd;
	fcb.fd := fd as uint32;
	if fd < 0 then
		errno := (-fd) as uint8;
	else
		errno := 0;
	end if;
end sub;

sub FCBOpenIn(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	(errno) := fcb_i_open(fcb, filename, 0o0000); # O_RDONLY
end sub;

sub FCBOpenUp(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	(errno) := fcb_i_open(fcb, filename, 0o0002); # O_RDWR
end sub;

sub FCBOpenOut(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	(errno) := fcb_i_open(fcb, filename, 0o1102); # O_RDWR|O_CREAT|O_TRUNC
end sub;
	
sub FCBClose(fcb: [FCB]): (errno: uint8) is
	FCBFlush(fcb);

	var fd := fcb.fd;
	@asm "mov $6, %eax"; # CLOSE
	@asm "movl ", fd, ", %ebx";
	@asm "int $0x80";
	@asm "neg %eax";
	@asm "mov %al, ", errno;
end sub;

sub FCBExt(fcb: [FCB]): (len: uint32) is
	FCBFlush(fcb);

	var fd := fcb.fd;
	@asm "mov $19, %eax"; # LSEEK
	@asm "movl ", fd, ", %ebx";
	@asm "xor %ecx, %ecx"; # offset
	@asm "mov $2, %edx"; # SEEK_END
	@asm "int $0x80";
	@asm "mov %eax, ", len;
end sub;

include "common-file.coh";

