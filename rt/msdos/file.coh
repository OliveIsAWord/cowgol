const FCB_BUFFER_SIZE := 512;
typedef FCBIndexType is uint16;

record RawFCB is
	fd: uint16;
end record;

include "fileio.coh";

@impl sub FCBRawRead is
	var fd := fcb.fd;
	var dma := &fcb.buffer[0];
    var failed: uint8 := 0;

    @asm "mov bx, [", fd, "]";
    @asm "mov cx, [", pos, "+2]";
    @asm "mov dx, [", pos, "+0]";
    @asm "mov ax, 0x4200";
    @asm "int 0x21";

    @asm "mov bx, [", fd, "]";
    @asm "mov cx, [", len, "]";
    @asm "mov dx, [", dma, "]";
    @asm "mov ah, 0x3f"; # read file
    @asm "int 0x21";
    @asm "mov [", amount, "], ax";
    @asm "rcl byte [", failed, "], 1";

    if failed != 0 then
        fcb.flags := fcb.flags | FCB_FLAG_ERROR;
        amount := 0;
    end if;
end sub;

@impl sub FCBRawWrite is
	var fd := fcb.fd;
	var dma := &fcb.buffer[0];
    var failed: uint8 := 0;

    @asm "mov bx, [", fd, "]";
    @asm "mov cx, [", pos, "+2]";
    @asm "mov dx, [", pos, "+0]";
    @asm "mov ax, 0x4200";
    @asm "int 0x21";

    @asm "mov bx, [", fd, "]";
    @asm "mov cx, [", len, "]";
    @asm "mov dx, [", dma, "]";
    @asm "mov ah, 0x40"; # write file
    @asm "int 0x21";
    @asm "rcl byte [", failed, "], 1";

    if failed != 0 then
        fcb.flags := fcb.flags | FCB_FLAG_ERROR;
    end if;
end sub;

sub FCBOpenIn(fcb: [FCB], filename: [uint8]): (errno: uint8) is
    var res: uint16;
    var failed: uint8 := 0;
    _fcb_init(fcb);
    @asm "mov ax, 0x3d00";
    @asm "mov dx, [", filename, "]";
    @asm "int 0x21";
    @asm "mov word [", res, "], ax";
    @asm "rcl byte [", failed, "], 1";
    errno := 0;
    if failed != 0 then
        errno := res as uint8;
    else
        fcb.fd := res;
    end if;
end sub;

sub FCBOpenUp(fcb: [FCB], filename: [uint8]): (errno: uint8) is
    var res: uint16;
    var failed: uint8 := 0;
    _fcb_init(fcb);
    @asm "mov ax, 0x3d02";
    @asm "mov dx, [", filename, "]";
    @asm "int 0x21";
    @asm "mov word [", res, "], ax";
    @asm "rcl byte [", failed, "], 1";
    if (failed != 0) and (res == 2) then # file not found
        failed := 0;
        @asm "mov ah, 0x3c";
        @asm "mov dx, [", filename, "]";
        @asm "xor cx, cx";
        @asm "int 0x21";
        @asm "mov word [", res, "], ax";
        @asm "rcl byte [", failed, "], 1";
    end if;
    errno := 0;
    if failed != 0 then
        errno := res as uint8;
    else
        fcb.fd := res;
    end if;
end sub;

sub FCBOpenOut(fcb: [FCB], filename: [uint8]): (errno: uint8) is
    errno := FCBOpenUp(fcb, filename);
end sub;
	
sub FCBClose(fcb: [FCB]): (errno: uint8) is
	FCBFlush(fcb);

    var failed: uint8 := 0;
    var fd := fcb.fd;
    @asm "mov bx, [", fd, "]";
    @asm "mov ah, 0x3e";
    @asm "int 0x21";
    @asm "mov byte [", errno, "], al";
    @asm "rcl byte [", failed, "], 1";
    if failed == 0 then
        errno := 0;
    end if;
end sub;

sub FCBExt(fcb: [FCB]): (len: uint32) is
	FCBFlush(fcb);

	var fd := fcb.fd;
    @asm "mov ax, 0x4202";
    @asm "mov bx, [", fd, "]";
    @asm "xor cx, cx";
    @asm "xor dx, dx";
    @asm "int 0x21";
    @asm "mov [", len, "+0], ax";
    @asm "mov [", len, "+2], dx";
end sub;

include "common-file.coh";

# vim: ts=4 sw=4 et

